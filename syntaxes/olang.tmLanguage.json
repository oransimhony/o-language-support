{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "O",
	"patterns": [
		{
			"include": "#comment"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#assignment-operator"
		},
		{
			"include": "#numeric-literal"
		},
		{
			"include": "#boolean-literal"
		},
		{
			"include": "#nil-literal"
		},
		{
			"include": "#arrow-operator"
		},
		{
			"include": "#plus-operator"
		},
		{
			"include": "#minus-operator"
		},
		{
			"include": "#star-operator"
		},
		{
			"include": "#slash-operator"
		},
		{
			"include": "#modulo-operator"
		},
		{
			"include": "#comparison-operator"
		},
		{
			"include": "#condition-operator"
		},
		{
			"include": "#pipe-operator"
		},
		{
			"include": "#types"
		},
		{
			"include": "#other-operators"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [{
				"name": "keyword.control.olang",
				"match": "\\b(if|while|for|return|let|print|else|fn|lambda|import|struct|typeof|class)\\b"
			}]
		},
		"strings": {
			"name": "string.quoted.double.olang",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.olang",
					"match": "\\\\."
				}
			]
		},
		"assignment-operator": {
			"name": "keyword.operator.assignment.olang",
			"match": "="
		},
		"numeric-literal": {
			"name": "constant.numeric.olang",
			"match": "\\s*([0-9]+(\\.[0-9]+)?)"
		},
		"boolean-literal": {
			"name": "constant.language.boolean.olang",
			"match": "(\\s*)(true|false)\\b"
		},
		"nil-literal": {
			"name": "constant.language.nil.olang",
			"match": "(\\s*)nil\\b"
		},
		"arrow-operator": {
			"name": "keyword.operator.arrow.olang",
			"match": "(\\s*)=>"
		},
		"plus-operator": {
			"name": "keyword.operator.plus.olang",
			"match": "(\\s*)\\+"
		},
		"minus-operator": {
			"name": "keyword.operator.minus.olang",
			"match": "(\\s*)-"
		},
		"star-operator": {
			"name": "keyword.operator.star.olang",
			"match": "(\\s*)\\*"
		},
		"slash-operator": {
			"name": "keyword.operator.slash.olang",
			"match": "(\\s*)/"
		},
		"modulo-operator": {
			"name": "keyword.operator.modulo.olang",
			"match": "(\\s*)%"
		},
		"comparison-operator": {
			"name": "keyword.operator.comparison.olang",
			"match": "==|!=|<=|>=|<|>"
		},
		"condition-operator": {
			"name": "keyword.operator.condition.olang",
			"match": "!|([^A-Za-z0-9]|\\b)and([^A-Za-z0-9]|\\b)|([^A-Za-z0-9])or([^A-Za-z0-9])"
		},
		"pipe-operator": {
			"name": "keyword.operator.pipe.olang",
			"match": "\\|>"
		},
		"comment": {
			"name": "comment.line.double-slash.olang",
			"match": "(\\s*)//(.)*"
		},
		"types": {
			"name": "entity.name.type.olang",
			"match": "\\b(int|float|string|list|dict)\\b"
		},
		"other-operators": {
			"name": "keyword.operator.other.olang",
			"match": "(:|\\.)"
		}
	},
	"scopeName": "source.olang"
}